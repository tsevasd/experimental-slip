"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb_bet"] = self["webpackChunkweb_bet"] || []).push([["app"],{

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.css */ \"./src/css/app.css\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n/* harmony import */ var _alpinejs_mask__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @alpinejs/mask */ \"./node_modules/@alpinejs/mask/dist/module.esm.js\");\n/* harmony import */ var _alpinejs_persist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @alpinejs/persist */ \"./node_modules/@alpinejs/persist/dist/module.esm.js\");\n/* harmony import */ var _alpinejs_intersect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @alpinejs/intersect */ \"./node_modules/@alpinejs/intersect/dist/module.esm.js\");\n/* harmony import */ var _components_common_UI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/common.UI */ \"./src/js/components/common.UI.js\");\n/* harmony import */ var _components_slip_UI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/slip.UI */ \"./src/js/components/slip.UI.js\");\n/* harmony import */ var _components_mybets_UI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/mybets.UI */ \"./src/js/components/mybets.UI.js\");\n// app.css\n\n\n\n\n\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].plugin(_alpinejs_mask__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].plugin(_alpinejs_persist__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].plugin(_alpinejs_intersect__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\nwindow.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].store('slipTab', {\n  t: alpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].$persist(1),\n  /* 1: slip, 2: open bets*/\n  goto(tab) {\n    this.t = tab;\n  }\n});\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].store('betslip', {\n  headerCounter: {\n    bets: 0,\n    openBets: 0,\n    count(bets, count) {\n      this[bets] = count;\n    }\n  },\n  keyboard: {\n    input: '',\n    timer: 0,\n    firstKey: true,\n    set(inp, val) {\n      this[inp] = val;\n    }\n  },\n  errorMessage: '',\n  error(msg) {\n    this.errorMessage = msg;\n  }\n});\n\n\n\n\n//init slip custom js\n//const common = { UI };\nconst slip = {\n  UI: _components_slip_UI__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n};\n//const mybets = { UI };\n\nwindow.common = _components_common_UI__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\nwindow.slip = slip;\nwindow.mybets = {\n  UI: _components_mybets_UI__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n};\n\n//# sourceURL=webpack://web.bet/./src/js/app.js?");

/***/ }),

/***/ "./src/js/components/common.UI.js":
/*!****************************************!*\
  !*** ./src/js/components/common.UI.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* culture */\nconst currentCulture = 'el';\nconst getCultureInfo = currentCulture => {\n  let n = Intl.NumberFormat(currentCulture).formatToParts(1000.1);\n  return {\n    culture: currentCulture,\n    decimalSeparator: n.find(part => part.type === 'decimal').value,\n    groupSeparator: n.find(part => part.type === 'group').value,\n    currencySymbol: currentCulture === 'el' ? 'â‚¬' : ''\n  };\n};\nvar cultureInfo = getCultureInfo(currentCulture);\n\n/* parse number <-> localized string */\nconst parse = function (input) {\n  let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentCulture;\n  let currency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'EUR';\n  //var re4 = new RegExp(`(\\?<=\\\\d)\\\\${cultureInfo.groupSeparator}(\\?=\\\\d{4})`, 'g'); /* check if there are loads of digits e.g. 10.00000001 */\n  //var re3 = new RegExp(`(\\?<=\\\\d)\\\\${cultureInfo.groupSeparator}(\\?=\\\\d{3})`, 'g'); /* remove group symbols e.g. 1.000.000,00 -> 1000000,00 */\n  let fmt = String(input);\n  /*if (isNaN(fmt)) {\r\n    if (!re4.test(fmt)) fmt = String(input).replace(re3, '');\r\n    fmt = fmt.replace(cultureInfo.decimalSeparator, '.');\r\n  }*/\n  //const pts = fmt.split(\".\");\n  /*if (pts.length > 1) {\r\n    if (pts[0] === 0) fmt = pts.join(\".\");\r\n    else if (pts[1].length === 0) fmt = pts.join(\"\");\r\n  }*/\n  //if (pts.length > 1) { if (pts[1].length === 0) fmt = pts[0]+'.00'; }\n  const number = Number(fmt);\n  const isValid = isFinite(number);\n  const string = number.toFixed(2);\n  /*const intlNFOpts = new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: currency,\r\n  }).resolvedOptions();*/\n  const output = number.toLocaleString(locale, {\n    /*...intlNFOpts,*/\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  const outputInf = number.toLocaleString(locale, {\n    style: 'decimal',\n    maximumFractionDigits: 10\n  });\n  return {\n    input,\n    isValid,\n    string,\n    number,\n    locale,\n    currency,\n    output,\n    outputInf\n  };\n};\nparse.fn = function (input) {\n  let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentCulture;\n  let currency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'EUR';\n  return new parse(input, locale = currentCulture, currency = 'EUR');\n};\nparse.toNum = str => {\n  str = typeof str === 'undefined' ? '0' : str.toString();\n  if (str.split(cultureInfo.decimalSeparator).length <= 2) {\n    // checks if any decimal\n    let output = str.replaceAll(cultureInfo.groupSeparator, '').replace(cultureInfo.decimalSeparator, '.');\n    if (isFinite(output)) return Number(output);else return 'NaN';\n  } else {\n    return 'NaN';\n  }\n};\nconst isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\nconst isMyBets = window.location.href.includes('mybets');\nconst dateFormat = (date, type) => {\n  /* DD mmm YYYY HH:MM:SS */\n  let dateObj = new Date(date);\n  if (typeof type !== 'undefined') {\n    if (type === 'short') return dateObj.toLocaleDateString(currentCulture, {\n      month: 'short',\n      day: 'numeric'\n    }) + ' ' + dateObj.toLocaleTimeString(currentCulture, {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  } else return dateObj.toLocaleDateString(currentCulture, {\n    month: 'short',\n    day: 'numeric'\n  }) + ' ' + dateObj.toLocaleTimeString(currentCulture, {\n    hour12: false\n  });\n};\nconst keyboard = model => {\n  return {\n    //currentInput: '',\n    getInput() {\n      let inp = model,\n        key = model.$store.betslip.keyboard.input,\n        keySplit = model.$store.betslip.keyboard.input.split('.'),\n        parent = '';\n      if (keySplit.length > 1) {\n        inp = model[keySplit[0]];\n        key = keySplit[1];\n        parent = keySplit[0];\n      }\n      return {\n        inp,\n        key,\n        parent\n      };\n    },\n    data: null,\n    toggle(inpId) {\n      if (isTouch) {\n        //if (typeof data !== 'undefined') this.data = model.$store.betslip.keyboard.input === inpId ? null : data;\n        if (model.$store.betslip.keyboard.input === inpId || inpId === '') {\n          let key = this.getInput().key,\n            inp = this.getInput().inp;\n          inp[key] = parse(parse.toNum(inp[key])).output;\n          model.$store.betslip.keyboard.set('input', '', {});\n          model.$store.betslip.keyboard.firstKey = true;\n        } else {\n          model.$store.betslip.keyboard.set('input', inpId);\n          let key = this.getInput().key,\n            inp = this.getInput().inp;\n          if (typeof inp[key] !== 'undefined' && inp[key].slice(-3) === cultureInfo.decimalSeparator + '00') {\n            inp[key] = inp[key].replace(inp[key].slice(-3), '');\n          }\n        }\n      }\n    },\n    preset: {\n      //timer: 0,\n      timeframe: 500,\n      amounts: [0.5, 1, 5, 10, 25, 50]\n    },\n    //firstKey: true,\n    action(val) {\n      if (val !== undefined) {\n        let fireKey = true,\n          key = this.getInput().key,\n          inp = this.getInput().inp,\n          parent = this.getInput().parent;\n        if (typeof inp[key] === 'undefined') inp[key] = '';\n        if (val.startsWith('+')) {\n          let t = Date.now();\n          if (t - model.$store.betslip.keyboard.timer < this.preset.timeframe) {\n            inp[key] = parse(parse.toNum(inp[key]) + Number(val.replace('+', ''))).output;\n          } else {\n            inp[key] = parse(val.replace('+', '')).output;\n          }\n          model.$store.betslip.keyboard.set('timer', t);\n          fireKey = false;\n          model.$store.betslip.keyboard.firstKey = false;\n        }\n        if (val === 'back') {\n          inp[key] = inp[key].slice(0, -1);\n          fireKey = false;\n          model.$store.betslip.keyboard.firstKey = false;\n        }\n        if (model.$store.betslip.keyboard.firstKey) {\n          inp[key] = '';\n          model.$store.betslip.keyboard.firstKey = false;\n        }\n        if (val === cultureInfo.decimalSeparator) {\n          if (inp[key].indexOf(val) > -1) fireKey = false;else if (inp[key] === '') inp[key] = '0';\n        }\n        if (inp[key].indexOf(cultureInfo.decimalSeparator) > -1 && inp[key].split(cultureInfo.decimalSeparator)[1].length === 2) fireKey = false;\n        if (fireKey) inp[key] += val;\n\n        /* System 3 calculations */\n        /*const systemCalculations = {\r\n            stakePerCol: model.setStakePerCol,\r\n            stakeTotalCols: model.setStakeTotalCols,\r\n            stakeTotalBets: model.setStakeTotalBets,\r\n            betColAmount: model.setBetColAmount,\r\n            betMulAmount: model.setBetMulAmount,\r\n            combinationBetAmount: model.setCombinationBetAmount\r\n        };\r\n        if (parent in systemCalculations) systemCalculations[parent].call(model, inp[key], key);\r\n        else if (key in systemCalculations) systemCalculations[key].call(model);*/\n\n        model.$nextTick(() => {\n          /* Partial CashOut calculations */\n          /*if (parent === 'partialCashoutAmount') {\r\n            if (inp[key].slice(-1) !== cultureInfo.decimalSeparator && inp[key] !== '' && inp[key] !== '0') {\r\n              let nativeAm = Math.round(model.$store.betslip.keyboard.data.val * 100),\r\n                  minAm = Math.round(model.$store.betslip.keyboard.data.minBetPerCol * 10 * 100),\r\n                  val = parse.toNum(inp[key]) * 100,\r\n                  finalAm = val,\r\n                  maxAm = (((model.$store.betslip.keyboard.data.sum - minAm / 1000) * 100) / model.$store.betslip.keyboard.data.sum / 100) * nativeAm;\r\n              console.log('val', val, 'maxAm', maxAm, 'nativeAm', nativeAm, 'minAm', minAm);\r\n              if (val > maxAm && val !== nativeAm) finalAm = maxAm;\r\n              if (val <= minAm) finalAm = minAm;\r\n              if (val > nativeAm) finalAm = nativeAm;\r\n              inp[key] = (finalAm / 100).toString().replace('.', cultureInfo.decimalSeparator);\r\n              //document.getElementById(`pc-rng-${model.$store.betslip.keyboard.data.id}`).value = (finalAm / nativeAm) * 100;\r\n              //document.getElementById(`pc-inp-${model.$store.betslip.keyboard.data.id}`).dispatchEvent(new Event('keyup'));\r\n              / *document.getElementById(`pc-rng-lbl-${model.$store.betslip.keyboard.data.id}`).textContent = Math.round(\r\n                (finalAm / nativeAm) * 100\r\n              );* /\r\n              //inp[key].dispatchEvent(new Event('keyup'));\r\n            }\r\n          }*/\n          let el = document.getElementById(model.$store.betslip.keyboard.input);\n          if (el !== null && el.hasAttribute('@keyup')) el.dispatchEvent(new Event('keyup'));\n        });\n      }\n    }\n  };\n};\nconst toggleDark = () => {\n  document.getElementsByTagName('html')[0].classList.toggle('dark');\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  cultureInfo,\n  getCultureInfo,\n  parse,\n  isTouch,\n  dateFormat,\n  keyboard,\n  isMyBets,\n  toggleDark\n});\n\n//# sourceURL=webpack://web.bet/./src/js/components/common.UI.js?");

/***/ }),

/***/ "./src/js/components/mybets.UI.js":
/*!****************************************!*\
  !*** ./src/js/components/mybets.UI.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.UI */ \"./src/js/components/common.UI.js\");\n\nconst mybetsHandler = () => {\n  const _defaultOpenBetsModel = {\n    Bets: []\n  };\n  return {\n    //headerOpenBetsCounter: 0,\n    loading: false,\n    duration: 6000,\n    filterBets: 0,\n    currency: '',\n    model: _defaultOpenBetsModel,\n    load() {\n      /* Open Bets */\n      if (this.$store.slipTab.t === 2) {\n        console.log('loads Unsettled Bets');\n        this.loading = true;\n        fetch('/Models/openbets.json').then(result => {\n          if (!result.ok) {\n            this.$store.betslip.error(result.statusText);\n          } else {\n            return result.json();\n          }\n        }).then(data => {\n          if (typeof data !== 'undefined') {\n            this.model = data;\n            this.currency = this.model.Bets[0].Currency === 'EUR' ? '&euro;' : this.model.Bets[0].Currency;\n            this.$store.betslip.headerCounter.count('openBets', this.model.Bets.length);\n            let falseList = [];\n            this.model.Bets.forEach(item => {\n              falseList[item.Id] = false;\n            }, this);\n            this.confirmCashOut = [...falseList];\n            this.betLoading = [...falseList];\n            this.model.Bets.forEach(item => {\n              this.confirmCashOut[item.Id] = false;\n            }, this);\n          }\n        }).catch(error => {\n          this.$store.betslip.error(error.message);\n        }).finally(() => {\n          this.loading = false;\n        });\n      }\n    },\n    confirmCashOut: [],\n    betLoading: [],\n    cashoutLoading: [],\n    cashoutAnswer: [],\n    partialCashoutAmount: [],\n    cashout(id) {\n      if (!this.confirmCashOut[id]) {\n        this.confirmCashOut[id] = true;\n        setTimeout(() => {\n          this.confirmCashOut[id] = false;\n        }, 6000);\n      } else {\n        console.log('Cash ' + id + ' Out... ');\n        this.confirmCashOut[id] = false;\n        this.cashoutAnswer[id] = 'Bet Cashed Out at â‚¬' + _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.partialCashoutAmount[id])).output;\n        setTimeout(function () {\n          this.model.Bets = this.model.Bets.filter(x => x.Id !== id);\n          this.$store.betslip.headerCounter.count('openBets', this.model.Bets.length);\n        }.bind(this), 6000);\n        this.cashoutLoading[id] = true;\n      }\n    },\n    async getDetails(id) {\n      let url = '/Models/openbets-details' + id + '.json';\n      console.log('fetching ' + id + '...');\n      this.betLoading[id] = true;\n      return await fetch(url).then(result => {\n        if (!result.ok) {\n          this.$store.betslip.error(result.statusText);\n        } else {\n          return result.json();\n        }\n      }).then(data => {\n        if (typeof data !== 'undefined') {\n          var details = data;\n          return details;\n        }\n      }).catch(function () {\n        console.error('Error');\n      }).finally(() => {\n        this.betLoading[id] = false;\n      });\n    },\n    scoreMeta(str, gameId) {\n      let obj = {\n          setscore: '',\n          score: '',\n          gamescore: '',\n          matchminute: '',\n          remainingtimeinperiod: ''\n        },\n        valid = true,\n        basketballQ = {\n          15: 'Q1',\n          16: 'Q2',\n          17: 'Q3',\n          18: 'Q4',\n          31: 'OT'\n        },\n        icehockeyP = {\n          3: 'P1',\n          4: 'P2',\n          5: 'P3',\n          6: 'P4',\n          7: 'P5'\n        };\n      try {\n        obj = JSON.parse(str);\n      } catch (err) {\n        valid = false;\n      }\n      if (valid) {\n        obj.setscore = obj.setscore.replace(' - ', '-');\n        obj.timeremaining = obj.remainingtimeinperiod === '' && obj.matchminute !== '' ? obj.matchminute + '&rsquo;' : obj.remainingtimeinperiod;\n        obj.quarter = '';\n        if ('eventstatusid' in obj) {\n          if (gameId === 2) obj.quarter = basketballQ[obj.eventstatusid];else if (gameId === 106) obj.quarter = icehockeyP[obj.eventstatusid];\n        }\n      }\n      return obj;\n    },\n    keyboard() {\n      return _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].keyboard(this);\n    }\n  };\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  mybetsHandler\n});\n\n//# sourceURL=webpack://web.bet/./src/js/components/mybets.UI.js?");

/***/ }),

/***/ "./src/js/components/slip.UI.js":
/*!**************************************!*\
  !*** ./src/js/components/slip.UI.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.UI */ \"./src/js/components/common.UI.js\");\n\nconst documentReady = (fn, culture) => {\n  // see if DOM is already available\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', fn);\n    let currentCulture = 'el'; //culture;\n    _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cultureInfo = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCultureInfo(currentCulture);\n  } else {\n    setTimeout(fn, 1);\n  }\n};\nsessionStorage.setItem('user', '{\"user\":{\"customerId\":\"xhGpHI4_g4jtuksvR_bBYjJAlzYRvde9\",\"userId\":\"8yDoAZtuLD15_RdUFjj2gg\",\"email\":\"LL_Ge8a4GDCDSJGFJImuXD2uj2qAyt02SxSFSAsWbIeN0OkqjGrC79ENkVqDS78wKCFiEl6evxb3pJU-ZK-K3g\",\"ticket\":\"p-fbkYf1VZQlyT9DNkmO6m1suk6QRCC9\",\"userName\":\"dtsevas\",\"firstName\":\"Dimosthenis\",\"lastName\":\"Tsevas\",\"balance\":432.04,\"calculatedBalance\":430.69,\"tax\":1.35,\"freeBetBalance\":9.55,\"freeBetExpiresOnUtc\":null,\"freeBetDisplayInSite\":true,\"freeBetDisplayInSlip\":true,\"currencyId\":106,\"currencyCode\":\"EUR\",\"countryId\":2,\"clientType\":7,\"agentId\":24003,\"status\":1,\"verificationStatus\":1,\"rememberMe\":false,\"lastTermId\":1},\"isAuthenticated\":true,\"countryCode\":\"GR\",\"shouldRedirect\":true,\"returnUrl\":\"/sports\",\"message\":\"\",\"shouldRemindGdpr\":false,\"responseStatus\":null}');\nconst _userData = () => {\n  const value = sessionStorage.getItem('user');\n  if (value == null) {\n    return null;\n  }\n  const quasarType = value.substr(0, 8);\n  const source = value.substring(9);\n\n  // Checks if stored by quasar\n  if (quasarType === '__q_objt') {\n    return JSON.parse(source);\n  }\n\n  // Otherwise it's stored as plain string\n  return JSON.parse(value);\n};\n\n/*let currentCulture;\r\nlet cultureInfo;*/\n/*const cultureInfo = currentCulture => {\r\n  var cultureName, pointer = '.', currency = 'EUR';\r\n  switch(currentCulture) {\r\n    case 'af':\r\n      cultureName = 'Afrikaans';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'am':\r\n      cultureName = 'Amharic';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ar-sa':\r\n      cultureName = 'Arabic (Saudi Arabia)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'as':\r\n      cultureName = 'Assamese';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'az-Latn':\r\n      cultureName = 'Azerbaijani (Latin)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'be':\r\n      cultureName = 'Belarusian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'bg':\r\n      cultureName = 'Bulgarian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'bn-BD':\r\n      cultureName = 'Bangla (Bangladesh)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'bn-IN':\r\n      cultureName = 'Bangla (India)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'bs':\r\n      cultureName = 'Bosnian (Latin)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ca':\r\n      cultureName = 'Catalan Spanish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ca-ES-valencia':\r\n      cultureName = 'Valencian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'cs':\r\n      cultureName = 'Czech';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'cy':\r\n      cultureName = 'Welsh';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'da':\r\n      cultureName = 'Danish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'de':\r\n      cultureName = 'German (Germany)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'de-de':\r\n      cultureName = 'German (Germany)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'el':\r\n      cultureName = 'Greek';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'en-GB':\r\n      cultureName = 'English (United Kingdom)';\r\n      currency = 'GBP';\r\n      pointer = '.';\r\n      break;\r\n    case 'en-US':\r\n      cultureName = 'English (United States)';\r\n      currency = 'USD';\r\n      pointer = '.';\r\n      break;\r\n    case 'es':\r\n      cultureName = 'Spanish (Spain)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'es-ES':\r\n      cultureName = 'Spanish (Spain)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'es-US':\r\n      cultureName = 'Spanish (United States)';\r\n      currency = 'USD';\r\n      pointer = '.';\r\n      break;\r\n    case 'es-MX':\r\n      cultureName = 'Spanish (Mexico)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'et':\r\n      cultureName = 'Estonian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'eu':\r\n      cultureName = 'Basque';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fa':\r\n      cultureName = 'Persian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fi':\r\n      cultureName = 'Finnish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fil-Latn':\r\n      cultureName = 'Filipino';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fr':\r\n      cultureName = 'French (France)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fr-FR':\r\n      cultureName = 'French (France)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'fr-CA':\r\n      cultureName = 'French (Canada)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ga':\r\n      cultureName = 'Irish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'gd-Latn':\r\n      cultureName = 'Scottish Gaelic';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'gl':\r\n      cultureName = 'Galician';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'gu':\r\n      cultureName = 'Gujarati';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ha-Latn':\r\n      cultureName = 'Hausa (Latin)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'he':\r\n      cultureName = 'Hebrew';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'hi':\r\n      cultureName = 'Hindi';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'hr':\r\n      cultureName = 'Croatian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'hu':\r\n      cultureName = 'Hungarian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'hy':\r\n      cultureName = 'Armenian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'id':\r\n      cultureName = 'Indonesian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ig-Latn':\r\n      cultureName = 'Igbo';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'is':\r\n      cultureName = 'Icelandic';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'it':\r\n      cultureName = 'Italian (Italy)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'it-it':\r\n      cultureName = 'Italian (Italy)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ja':\r\n      cultureName = 'Japanese';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ka':\r\n      cultureName = 'Georgian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'kk':\r\n      cultureName = 'Kazakh';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'km':\r\n      cultureName = 'Khmer';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'kn':\r\n      cultureName = 'Kannada';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ko':\r\n      cultureName = 'Korean';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'kok':\r\n      cultureName = 'Konkani';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ku-Arab':\r\n      cultureName = 'Central Kurdish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ky-Cyrl':\r\n      cultureName = 'Kyrgyz';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'lb':\r\n      cultureName = 'Luxembourgish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'lt':\r\n      cultureName = 'Lithuanian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'lv':\r\n      cultureName = 'Latvian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'mi-Latn':\r\n      cultureName = 'Maori';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'mk':\r\n      cultureName = 'Macedonian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ml':\r\n      cultureName = 'Malayalam';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'mn-Cyrl':\r\n      cultureName = 'Mongolian (Cyrillic)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'mr':\r\n      cultureName = 'Marathi';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ms':\r\n      cultureName = 'Malay (Malaysia)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'mt':\r\n      cultureName = 'Maltese';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'nb':\r\n      cultureName = 'Norwegian (BokmÃ¥l)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ne':\r\n      cultureName = 'Nepali (Nepal)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'nl':\r\n      cultureName = 'Dutch (Netherlands)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'nl-BE':\r\n      cultureName = 'Dutch (Netherlands)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'nn':\r\n      cultureName = 'Norwegian (Nynorsk)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'nso':\r\n      cultureName = 'Sesotho sa Leboa';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'or':\r\n      cultureName = 'Odia';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'pa':\r\n      cultureName = 'Punjabi (Gurmukhi)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'pa-Arab':\r\n      cultureName = 'Punjabi (Arabic)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'pl':\r\n      cultureName = 'Polish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'prs-Arab':\r\n      cultureName = 'Dari';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'pt-BR':\r\n      cultureName = 'Portuguese (Brazil)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'pt-PT':\r\n      cultureName = 'Portuguese (Portugal)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'qut-Latn':\r\n      cultureName = 'K\\â€™iche\\â€™';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'quz':\r\n      cultureName = 'Quechua (Peru)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ro':\r\n      cultureName = 'Romanian (Romania)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ru':\r\n      cultureName = 'Russian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'rw':\r\n      cultureName = 'Kinyarwanda';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sd-Arab':\r\n      cultureName = 'Sindhi (Arabic)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'si':\r\n      cultureName = 'Sinhala';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sk':\r\n      cultureName = 'Slovak';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sl':\r\n      cultureName = 'Slovenian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sq':\r\n      cultureName = 'Albanian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sr-Cyrl-BA':\r\n      cultureName = 'Serbian (Cyrillic, Bosnia and Herzegovina)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sr-Cyrl-RS':\r\n      cultureName = 'Serbian (Cyrillic, Serbia)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sr-Latn-RS':\r\n      cultureName = 'Serbian (Latin, Serbia)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sv':\r\n      cultureName = 'Swedish (Sweden)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'sw':\r\n      cultureName = 'Kiswahili';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ta':\r\n      cultureName = 'Tamil';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'te':\r\n      cultureName = 'Telugu';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'tg-Cyrl':\r\n      cultureName = 'Tajik (Cyrillic)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'th':\r\n      cultureName = 'Thai';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ti':\r\n      cultureName = 'Tigrinya';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'tk-Latn':\r\n      cultureName = 'Turkmen (Latin)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'tn':\r\n      cultureName = 'Setswana';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'tr':\r\n      cultureName = 'Turkish';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'tt-Cyrl':\r\n      cultureName = 'Tatar (Cyrillic)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ug-Arab':\r\n      cultureName = 'Uyghur';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'uk':\r\n      cultureName = 'Ukrainian';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'ur':\r\n      cultureName = 'Urdu';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'uz-Latn':\r\n      cultureName = 'Uzbek (Latin)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'vi':\r\n      cultureName = 'Vietnamese';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'wo':\r\n      cultureName = 'Wolof';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'xh':\r\n      cultureName = 'isiXhosa';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'yo-Latn':\r\n      cultureName = 'Yoruba';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'zh-Hans':\r\n      cultureName = 'Chinese (Simplified)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'zh-Hant':\r\n      cultureName = 'Chinese (Traditional)';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n    case 'zu':\r\n      cultureName = 'isiZulu';\r\n      currency = 'EUR';\r\n      pointer = ',';\r\n      break;\r\n  }\r\n  return {\r\n    currentCulture: currentCulture,\r\n    name: cultureName,\r\n    pointer: pointer,\r\n    currency: currency\r\n  }\r\n};*/\n\n/*const getCultureInfo = currentCulture => {\r\n  let n = Intl.NumberFormat(currentCulture).formatToParts(1000.1);\r\n  return {\r\n    culture: currentCulture,\r\n    decimalSeparator: n.find(part => part.type === 'decimal').value,\r\n    groupSeparator: n.find(part => part.type === 'group').value,\r\n    currencySymbol: currentCulture === 'el' ? 'â‚¬' : ''\r\n  };\r\n};*/\n\n/**\r\n * Parse value to currency\r\n * @param {number|string} input\r\n * @param {string} locale - Desired locale i.e: \"en-US\" \"hr-HR\"\r\n * @param {string} currency - Currency to use \"USD\" \"EUR\" \"HRK\"\r\n * @return {object}\r\n */\n/*\r\nconst parse000 = (input, locale = currentCulture, currency = 'EUR') => {\r\n  //var re4 = new RegExp(`(\\?<=\\\\d)\\\\${cultureInfo.groupSeparator}(\\?=\\\\d{4})`, 'g'); / * check if there are loads of digits e.g. 10.00000001 * /\r\n  //var re3 = new RegExp(`(\\?<=\\\\d)\\\\${cultureInfo.groupSeparator}(\\?=\\\\d{3})`, 'g'); / * remove group symbols e.g. 1.000.000,00 -> 1000000,00 * /\r\n  let fmt = String(input);\r\n  / *if (isNaN(fmt)) {\r\n    if (!re4.test(fmt)) fmt = String(input).replace(re3, '');\r\n    fmt = fmt.replace(cultureInfo.decimalSeparator, '.');\r\n  }* /\r\n  //const pts = fmt.split(\".\");\r\n  / *if (pts.length > 1) {\r\n    if (pts[0] === 0) fmt = pts.join(\".\");\r\n    else if (pts[1].length === 0) fmt = pts.join(\"\");\r\n  }* /\r\n  //if (pts.length > 1) { if (pts[1].length === 0) fmt = pts[0]+'.00'; }\r\n  const number = Number(fmt);\r\n  const isValid = isFinite(number);\r\n  const string = number.toFixed(2);\r\n  / *const intlNFOpts = new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: currency,\r\n  }).resolvedOptions();* /\r\n  const output = number.toLocaleString(locale, {\r\n    / *...intlNFOpts,* /\r\n    style: 'decimal',\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  });\r\n  const outputInf = number.toLocaleString(locale, {\r\n    style: 'decimal',\r\n    maximumFractionDigits: 10\r\n  });\r\n  return {\r\n    input,\r\n    isValid,\r\n    string,\r\n    number,\r\n    locale,\r\n    currency,\r\n    output,\r\n    outputInf\r\n  };\r\n};\r\n\r\nparse000.fn = (input, locale = currentCulture, currency = 'EUR') => {\r\n  return new common.parse(input, (locale = currentCulture), (currency = 'EUR'));\r\n};\r\n\r\nparse000.toNum = str => {\r\n  str = typeof str === 'undefined' ? '0' : str.toString();\r\n  if (str.split(cultureInfo.decimalSeparator).length <= 2) {\r\n    // checks if any decimal\r\n    let output = str.replaceAll(cultureInfo.groupSeparator, '').replace(cultureInfo.decimalSeparator, '.');\r\n    if (isFinite(output)) return Number(output);\r\n    else return 'NaN';\r\n  } else {\r\n    return 'NaN';\r\n  }\r\n};*/\n\nconst betslipHandler = () => {\n  const _emptyValues = obj => {\n    return obj.map(() => '');\n  };\n  const _toFloor2 = n => {\n    if (n !== '' && !isNaN(n) && n < 0.01 && n > 0.005) n = 0.01;\n    return n !== '' ? Math.floor(parseFloat(n) * 100) / 100 : 0;\n  };\n  const _systemChange = (obj, sysNo, prevNo) => {\n    let hasBetBuilder = typeof obj.Events !== 'undefined' && obj.Events.some(v => Object.keys(v).some(() => v.IsCustomBetEvent));\n    let hasMultiple = typeof obj.Events !== 'undefined' && obj.Events.some(v => v.Selections.length > 1);\n    if (typeof sysNo === 'undefined') {\n      if (hasBetBuilder) return 1;else if (hasMultiple && prevNo !== 4) return 3;else if (typeof prevNo !== 'undefined') return prevNo;else return 1;\n    } else {\n      if (sysNo !== 1 && hasBetBuilder) {\n        return prevNo;\n      }\n      if (sysNo === 1 && hasMultiple) {\n        return prevNo;\n      }\n      return sysNo;\n    }\n  };\n  const _systemXCols = obj => {\n    const _sysXCols = [];\n    obj.forEach(c => _sysXCols[c.CounterLines] = c.CombinationsProduced);\n    return _sysXCols;\n  };\n  const _defaultModel = {\n    BetSlip: {\n      Events: []\n    },\n    Combinations: []\n  };\n  return {\n    /*currentCulture() {\r\n      return common.currentCulture;\r\n    },*/\n    /*decimalSeparator: common.cultureInfo.decimalSeparator,*/\n    isShop: false,\n    setTimeoutAction: null,\n    fadeOut: [],\n    loading: false,\n    model: _defaultModel,\n    load(url) {\n      /* Betslip */\n      if (this.$store.slipTab.t === 1) {\n        console.log('loads betslip model');\n        if (typeof url === 'undefined' || typeof url !== 'string') url = '/Models/events1Single.json';\n        this.loading = true;\n        fetch(url).then(result => {\n          if (!result.ok) {\n            this.$store.betslip.error(result.statusText);\n          } else {\n            return result.json();\n          }\n        }).then(data => {\n          if (typeof data !== 'undefined') {\n            this.model = data;\n            this.system = _systemChange(this.model.BetSlip, undefined, this.system);\n            this.$store.betslip.headerCounter.count('bets', this.model.BetSlip.Events.reduce((count, innerArray) => count + (innerArray.IsCustomBetEvent ? 1 : innerArray.Selections.length), 0));\n            this.BBError = false;\n            this.systemCombinationsAll = this.model.Combinations.map(c => c.CounterLines);\n            this.betColAmount = [..._emptyValues(this.model.Combinations)];\n            this.betMulAmount = [..._emptyValues(this.model.Combinations)];\n            this.combinationBetAmount = [..._emptyValues(this.model.Combinations)];\n            this.systemXCols = _systemXCols(this.model.Combinations);\n            this.systemXBets = this.model.BetSlip.MultiplesBets;\n            this.oddsChanged = this.model.BetResponse.ChangedOdds.some(s => s.Modified === -1 || s.Modified === 1);\n            if (_userData().user.freeBetBalance > 0) {\n              this.Freebet.enabled = true;\n              this.Freebet.balance = _userData().user.freeBetBalance;\n            }\n          }\n        }).catch(error => {\n          this.$store.betslip.error(error.message);\n        }).finally(() => {\n          this.loading = false;\n        });\n      }\n      /* Open Bets */\n      /*if (this.$store.slipTab.t === 2) {\r\n        console.log('will load Unsettled Bets');\r\n        this.loading = true;\r\n        fetch('/Models/openbets.json')\r\n          .then(result => {\r\n            if (!result.ok) {\r\n              this.$store.betslip.error(result.statusText);\r\n            } else {\r\n              return result.json();\r\n            }\r\n          })\r\n          .then(data => {\r\n            if (typeof data !== 'undefined') {\r\n              this.openbets.model = data;\r\n              this.openbets.currency =\r\n                this.openbets.model.Bets[0].Currency === 'EUR' ? '&euro;' : this.openbets.model.Bets[0].Currency;\r\n              this.$store.headerCounter.count('openBets', this.openbets.model.Bets.length);\r\n              let falseList = [];\r\n              this.openbets.model.Bets.forEach(item => {\r\n                falseList[item.Id] = false;\r\n              }, this);\r\n              this.openbets.confirmCashOut = [...falseList];\r\n              this.openbets.betLoading = [...falseList];\r\n              this.openbets.model.Bets.forEach(item => {\r\n                this.openbets.confirmCashOut[item.Id] = false;\r\n              }, this);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.$store.betslip.error(error.message);\r\n          })\r\n          .finally(() => {\r\n            this.loading = false;\r\n          });\r\n      }*/\n    },\n\n    system: 1 /* Singles:4, Parlay: 1, System: 3 */,\n    systemChange: _systemChange,\n    //headerOddsCounter: 0,\n    oddsChanged: false,\n    removeEvent(SportEventId) {\n      const eIndex = this.model.BetSlip.Events.findIndex(e => e.SportEventId === SportEventId);\n      if (eIndex > -1) {\n        this.loading = true;\n        this.fadeOut[SportEventId] = true;\n        setTimeout(function () {\n          this.model.BetSlip.Events.splice(eIndex, 1);\n          this.fadeOut[SportEventId] = undefined;\n          this.loading = false;\n        }.bind(this), 150);\n        this.unselectAll();\n      }\n    },\n    removeOdd(OddId, SportEventId) {\n      const eIndex = this.model.BetSlip.Events.findIndex(e => e.SportEventId === SportEventId);\n      if (this.model.BetSlip.Events[eIndex].Selections.length === 1) {\n        this.removeEvent(SportEventId);\n      } else {\n        const sIndex = this.model.BetSlip.Events[eIndex].Selections.findIndex(s => s.OddId === OddId);\n        if (eIndex > -1) {\n          this.loading = true;\n          this.fadeOut[SportEventId + '_' + OddId] = true;\n          setTimeout(function () {\n            this.model.BetSlip.Events[eIndex].Selections.splice(sIndex, 1);\n            this.fadeOut[SportEventId + '_' + OddId] = undefined;\n            this.loading = false;\n            if (this.model.BetSlip.Events[eIndex].IsCustomBetEvent && this.model.BetSlip.Events[eIndex].Selections < 2) this.BBError = true;\n          }.bind(this), 150);\n          this.unselectAll();\n        }\n      }\n    },\n    clearSlip() {\n      this.loading = true;\n      this.model.BetSlip.Events.forEach(function (e) {\n        this.fadeOut[e.SportEventId] = true;\n      }, this);\n      setTimeout(function () {\n        this.model = _defaultModel;\n        this.fadeOut = [];\n        this.loading = false;\n      }.bind(this), 150);\n    },\n    /* Single */\n    singleTotalAmount: 0,\n    singleTotalOdd: 0,\n    singleAmount: [],\n    calculateSingleTotalAmount() {\n      this.singleTotalAmount = 0;\n      if (this.model.BetSlip.Events.length > 0) {\n        this.model.BetSlip.Events.forEach(function (e) {\n          e.Selections.forEach(function (s) {\n            if (_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.singleAmount['singleAmount_' + e.SportEventId + '_' + s.OddId]) > 0) this.singleTotalAmount += _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.singleAmount['singleAmount_' + e.SportEventId + '_' + s.OddId]);\n          }, this);\n        }, this);\n      }\n      return _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(this.singleTotalAmount).output;\n    },\n    /* Parlay */\n    parlayAmount: '',\n    parlayTotalOdd: 0,\n    winningTotalOdd(system) {\n      this[system + 'TotalOdd'] = 0;\n      if (this.model.BetSlip.Events.length > 0) {\n        this.model.BetSlip.Events.forEach(function (e) {\n          e.Selections.forEach(function (s) {\n            if (system === 'single' && _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this[system + 'Amount']['singleAmount_' + e.SportEventId + '_' + s.OddId]) > 0) this[system + 'TotalOdd'] += Number(s.OddValue);\n            if (system === 'parlay') {\n              if (e.IsCustomBetEvent) {\n                this[system + 'TotalOdd'] += Number(e.CustomBetOddValue);\n              } else {\n                e.Selections.forEach(function (s) {\n                  this[system + 'TotalOdd'] += Number(s.OddValue);\n                }, this);\n              }\n            }\n          }, this);\n        }, this);\n      }\n      if (this.Freebet.active) this[system + 'TotalOdd'] = this[system + 'TotalOdd'] * this.Freebet.oddPercentage;\n      return _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(this[system + 'TotalOdd']).output;\n    },\n    BBError: false,\n    /* System 3 */\n    setBanker(SportEventId) {\n      this.loading = true;\n      fetch('/Models/banker.json').then(res => res.json()).then(data => {\n        var event = data.ViewModel.BetSlip.Events.find(e => e.SportEventId === SportEventId);\n        if (typeof event !== 'undefined') {\n          this.model.BetSlip.Events.find(e => e.SportEventId === SportEventId).Banker = event.Banker;\n          this.model.Combinations = data.ViewModel.Combinations;\n          this.systemCombinationsAll = this.model.Combinations.map(c => c.CounterLines);\n          this.systemXCols = _systemXCols(this.model.Combinations);\n          this.systemXBets = this.model.BetSlip.MultiplesBets;\n          var newSystemCombinationsSelected = this.model.Combinations.map(c => c.CounterLines);\n          this.systemCombinationsSelected = this.systemCombinationsSelected.filter(c => newSystemCombinationsSelected.indexOf(c) !== -1);\n          let d = 0;\n          this.systemCombinationsSelected.forEach(function (counterLine) {\n            d += this.systemXCols[counterLine];\n          }, this);\n          if (this.stakePerCol === '' && this.stakePerCol === '' && this.stakePerCol === '') {\n            if (this.systemTotalAmount() > 0) {\n              var total = this.systemTotalAmount();\n              this.systemCombinationsSelected.forEach(function (counterLine) {\n                this.setBetMulAmount(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(total / (d * this.systemXBets) * this.systemXCols[counterLine]).outputInf, counterLine, true);\n              }, this);\n            }\n          } else {\n            if (this.stakePerCol !== '') this.systemCombinationsSelected.forEach(function (counterLine) {\n              this.setBetColAmount(this.stakePerCol, counterLine, true);\n            }, this);\n            if (this.stakeTotalCols !== '') this.systemCombinationsSelected.forEach(function (counterLine) {\n              this.setBetMulAmount(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalCols) / (d * this.systemXBets) * this.systemXCols[counterLine]).outputInf, counterLine, true);\n            }, this);\n            if (this.stakeTotalBets !== '') this.systemCombinationsSelected.forEach(function (counterLine) {\n              this.setCombinationBetAmount(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalBets) / this.systemCombinationsSelected.length).outputInf, counterLine, true);\n            }, this);\n          }\n        }\n        this.loading = false;\n      });\n    },\n    stakePerCol: '',\n    stakeTotalCols: '',\n    stakeTotalBets: '',\n    systemCombinationsAll: [],\n    systemCombinationsSelected: [],\n    betColAmount: [],\n    betMulAmount: [],\n    combinationBetAmount: [],\n    systemXCols: [],\n    systemXBets: 0,\n    stakeInvalid: false,\n    setStakePerCol() {\n      //console.log('parlayAmount', this.parlayAmount, 'parlayTotalOdd', this.parlayTotalOdd);\n      //console.log('systemCombinationsSelected', this.systemCombinationsSelected);\n      this.stakeTotalCols = '';\n      this.stakeTotalBets = '';\n      if (this.systemCombinationsSelected.length === 0) this.systemCombinationsSelected = this.systemCombinationsAll;\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        this.setBetColAmount(this.stakePerCol, counterLine, true);\n      }, this);\n    },\n    setStakeTotalCols() {\n      console.log('this.systemCombinationsSelected', this.systemCombinationsSelected);\n      console.log('this.systemCombinationsSelected.length', this.systemCombinationsSelected.length);\n      this.stakePerCol = '';\n      this.stakeTotalBets = '';\n      if (this.systemCombinationsSelected.length === 0) this.systemCombinationsSelected = this.systemCombinationsAll;\n\n      /* limit error */\n      if (this.setTimeoutAction !== null) clearTimeout(this.setTimeoutAction);\n      let limit = this.systemCombinationsSelected.length * 0.01 * this.model.BetSlip.MultiplesBets;\n      console.log(this.systemCombinationsSelected.length, '0.01', this.model.BetSlip.MultiplesBets, this.stakeTotalCols + ' < limit:' + limit, _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalCols) < limit);\n      if (_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalCols) < limit) {\n        this.stakeInvalid = true;\n        this.setTimeoutAction = setTimeout(function () {\n          this.setTimeoutAction = null;\n          this.$store.betslip.error(`Minimum is: ${_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cultureInfo.currencySymbol} ${_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(limit).output}`);\n          return;\n        }.bind(this), 1200);\n      } else {\n        this.stakeInvalid = false;\n      }\n      let d = 0;\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        d += this.systemXCols[counterLine];\n      }, this);\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        this.setBetMulAmount(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalCols) / (d * this.systemXBets) * this.systemXCols[counterLine]).outputInf, counterLine, true);\n      }, this);\n    },\n    setStakeTotalBets() {\n      this.stakePerCol = '';\n      this.stakeTotalCols = '';\n      if (this.systemCombinationsSelected.length === 0) this.systemCombinationsSelected = this.systemCombinationsAll;\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        this.setCombinationBetAmount(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.stakeTotalBets) / this.systemCombinationsSelected.length).outputInf, counterLine, true);\n      }, this);\n    },\n    setBetColAmount(val, counterLine, all) {\n      let betCol = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(val),\n        betMul = betCol * this.systemXCols[counterLine],\n        combinationBet = _toFloor2(betCol * this.systemXBets * this.systemXCols[counterLine]);\n      if (all) this.betColAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betCol).output;\n      this.betMulAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betMul).output;\n      this.combinationBetAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(combinationBet).output;\n      this.checkCombination(counterLine);\n    },\n    setBetMulAmount(val, counterLine, all) {\n      let betMul = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(val),\n        betCol = betMul / this.systemXCols[counterLine],\n        combinationBet = _toFloor2(betCol * this.systemXBets * this.systemXCols[counterLine]);\n      if (all) this.betMulAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betMul).output;\n      this.betColAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betCol).output;\n      this.combinationBetAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(combinationBet).output;\n      this.checkCombination(counterLine);\n    },\n    setCombinationBetAmount(val, counterLine, all) {\n      let combinationBet = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(val),\n        betCol = (combinationBet / this.systemXBets / this.systemXCols[counterLine]).toFixed(2),\n        betMul = (betCol * this.systemXCols[counterLine]).toFixed(2);\n      if (all) this.combinationBetAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(_toFloor2(combinationBet)).output;\n      this.betColAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betCol).output;\n      this.betMulAmount[counterLine] = _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(betMul).output;\n      this.checkCombination(counterLine);\n    },\n    checkCombination(counterLine) {\n      if (this.betColAmount[counterLine] !== '' && this.betColAmount[counterLine] !== 0) {\n        if (this.systemCombinationsSelected.indexOf(counterLine) === -1) this.systemCombinationsSelected.push(counterLine);\n      } else {\n        this.systemCombinationsSelected.splice(this.systemCombinationsSelected.indexOf(counterLine), 1);\n      }\n    },\n    selectCombination(counterLine) {\n      console.log(counterLine, counterLine in this.systemCombinationsSelected);\n      if (isNaN(counterLine) && counterLine.toLowerCase() === 'all') this.systemCombinationsSelected = this.systemCombinationsAll;else if (this.systemCombinationsSelected.indexOf(counterLine) === -1) {\n        this.betColAmount[counterLine] = '';\n        this.betMulAmount[counterLine] = '';\n        this.combinationBetAmount[counterLine] = '';\n      }\n      if (this.systemCombinationsSelected.length !== 0) {\n        if (this.stakePerCol !== '') this.setStakePerCol();else if (this.stakeTotalCols !== '') this.setStakeTotalCols();else if (this.stakeTotalBets !== '') this.setStakeTotalBets();\n      }\n    },\n    unselectAll() {\n      this.systemCombinationsSelected = [];\n      this.systemCombinationsAll.forEach(function (counterLine) {\n        this.betColAmount[counterLine] = '';\n        this.betMulAmount[counterLine] = '';\n        this.combinationBetAmount[counterLine] = '';\n      }, this);\n    },\n    totalColsInBet() {\n      let colsInBet = 0;\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        if (this.betColAmount[counterLine] !== '' && this.betColAmount[counterLine] !== '0' && this.betColAmount[counterLine] !== 0) colsInBet += this.systemXCols[counterLine];\n      }, this);\n      return colsInBet;\n    },\n    systemTotalAmount() {\n      let total = 0;\n      this.systemCombinationsSelected.forEach(function (counterLine) {\n        if (this.combinationBetAmount[counterLine] !== '' && this.combinationBetAmount[counterLine] !== '0' && this.combinationBetAmount[counterLine] !== 0) total += parseFloat(_common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.combinationBetAmount[counterLine]));\n      }, this);\n      return _toFloor2(total);\n    },\n    keyboard() {\n      return _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].keyboard(this);\n    },\n    /*    / * custom mobile keyboard * /\r\n        currentInput: '',\r\n        keyboardtInput() {\r\n          let inp = this,\r\n            key = this.currentInput,\r\n            keySplit = this.currentInput.split('.'),\r\n            parent = '';\r\n          if (keySplit.length > 1) {\r\n            inp = this[keySplit[0]];\r\n            key = keySplit[1];\r\n            parent = keySplit[0];\r\n          }\r\n          return {\r\n            inp,\r\n            key,\r\n            parent\r\n          };\r\n        },\r\n        keyboardData: null,\r\n        toggleKeyboard(inpId, dat) {\r\n          if (this.isTouch) {\r\n            if (typeof dat !== 'undefined') this.keyboardData = this.currentInput === inpId ? null : dat;\r\n            if (this.currentInput === inpId || inpId === '') {\r\n              let key = this.keyboardtInput().key,\r\n                inp = this.keyboardtInput().inp;\r\n              inp[key] = common.parse(parse.toNum(inp[key])).output;\r\n              this.currentInput = '';\r\n              this.keyboardFirstKey = true;\r\n            } else {\r\n              this.currentInput = inpId;\r\n              let key = this.keyboardtInput().key,\r\n                inp = this.keyboardtInput().inp;\r\n              if (typeof inp[key] !== 'undefined' && inp[key].slice(-3) === this.decimalSeparator + '00') {\r\n                inp[key] = inp[key].replace(inp[key].slice(-3), '');\r\n              }\r\n            }\r\n          }\r\n        },\r\n        keyboardPreset: {\r\n          timer: 0,\r\n          timeframe: 500,\r\n          amounts: [0.5, 1, 5, 10, 25, 50]\r\n        },\r\n        keyboardFirstKey: true,\r\n        keyboard(val) {\r\n          if (val !== undefined) {\r\n            let fireKey = true,\r\n              key = this.keyboardtInput().key,\r\n              inp = this.keyboardtInput().inp,\r\n              parent = this.keyboardtInput().parent;\r\n            if (typeof inp[key] === 'undefined') inp[key] = '';\r\n            if (val.startsWith('+')) {\r\n              let t = Date.now();\r\n              if (t - this.keyboardPreset.timer < this.keyboardPreset.timeframe) {\r\n                inp[key] = common.parse(common.parse.toNum(inp[key]) + Number(val.replace('+', ''))).output;\r\n              } else {\r\n                inp[key] = common.parse(val.replace('+', '')).output;\r\n              }\r\n              this.keyboardPreset.timer = t;\r\n              fireKey = false;\r\n              this.keyboardFirstKey = false;\r\n            }\r\n            if (val === 'back') {\r\n              inp[key] = inp[key].slice(0, -1);\r\n              fireKey = false;\r\n              this.keyboardFirstKey = false;\r\n            }\r\n            if (this.keyboardFirstKey) {\r\n              inp[key] = '';\r\n              this.keyboardFirstKey = false;\r\n            }\r\n            if (val === this.decimalSeparator) {\r\n              if (inp[key].indexOf(val) > -1) fireKey = false;\r\n              else if (inp[key] === '') inp[key] = '0';\r\n            }\r\n            if (inp[key].indexOf(this.decimalSeparator) > -1 && inp[key].split(this.decimalSeparator)[1].length === 2)\r\n              fireKey = false;\r\n            if (fireKey) inp[key] += val;\r\n    \r\n            / * System 3 calculations * /\r\n            const systemCalculations = {\r\n              stakePerCol: this.setStakePerCol,\r\n              stakeTotalCols: this.setStakeTotalCols,\r\n              stakeTotalBets: this.setStakeTotalBets,\r\n              betColAmount: this.setBetColAmount,\r\n              betMulAmount: this.setBetMulAmount,\r\n              combinationBetAmount: this.setCombinationBetAmount\r\n            };\r\n            if (parent in systemCalculations) systemCalculations[parent].call(this, inp[key], key);\r\n            else if (key in systemCalculations) systemCalculations[key].call(this);\r\n    \r\n            / * Partial CashOut calculations * /\r\n            if (parent === 'partialCashoutAmount') {\r\n              this.$nextTick(() => {\r\n                if (inp[key].slice(-1) !== this.decimalSeparator && inp[key] !== '' && inp[key] !== '0') {\r\n                  let nativeAm = Math.round(this.keyboardData.val * 100),\r\n                    minAm = Math.round(this.keyboardData.minBetPerCol * 10 * 100),\r\n                    val = common.parse.toNum(inp[key]) * 100,\r\n                    finalAm = val,\r\n                    maxAm = (((this.keyboardData.sum - minAm / 1000) * 100) / this.keyboardData.sum / 100) * nativeAm;\r\n                  console.log('val', val, 'maxAm', maxAm, 'nativeAm', nativeAm, 'minAm', minAm);\r\n                  if (val > maxAm && val !== nativeAm) finalAm = maxAm;\r\n                  if (val <= minAm) finalAm = minAm;\r\n                  if (val > nativeAm) finalAm = nativeAm;\r\n                  inp[key] = (finalAm / 100).toString().replace('.', this.decimalSeparator);\r\n                  document.getElementById(`pc-rng-${this.keyboardData.id}`).value = (finalAm / nativeAm) * 100;\r\n                  document.getElementById(`pc-rng-lbl-${this.keyboardData.id}`).textContent = Math.round(\r\n                    (finalAm / nativeAm) * 100\r\n                  );\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },*/\n\n    Freebet: {\n      enabled: false,\n      active: false,\n      balance: 0,\n      oddPercentage: 0.8\n    },\n    slipInvalid() {\n      return this.system === 4 && _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.singleTotalAmount) === 0 || this.system === 1 && _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.parlayAmount) === 0 || this.Freebet.active && _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.parlayAmount) > Number(this.Freebet.balance) || this.system === 3 && parseFloat(this.systemTotalAmount()) === 0 || this.system === 3 && this.stakeInvalid || this.Freebet.active && _common_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse.toNum(this.parlayAmount) > Number(this.Freebet.balance) || this.loading || this.BBError;\n    },\n    formSubmitTemp(e) {\n      this.loading = true;\n      e.preventDefault();\n      let obj = {};\n      const formData = new FormData(document.getElementById('form0'));\n      for (let key of formData.keys()) {\n        obj[key] = formData.get(key);\n      }\n      console.log(obj);\n\n      /*\r\n      /Models/BetReceipt-4Singles.json\r\n      /Models/BetReceipt-4Multiples.json\r\n      /Models/BetReceipt-4LiveBetting.json\r\n      /Models/BetReceipt-BetBuilder.json\r\n      /Models/BetReceipt-BetBuilder2.json\r\n      /Models/BetReceipt-Failed1.json\r\n      /Models/BetReceipt-Failed2.json\r\n      */\n      fetch('/Models/BetReceipt-4Singles.json').then(result => {\n        if (!result.ok) {\n          this.$store.betslip.error(result.statusText);\n        } else {\n          return result.json();\n        }\n      }).then(data => {\n        if (typeof data !== 'undefined') {\n          this.receipt = data;\n        }\n      }).catch(error => {\n        this.$store.betslip.error(error.message);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    receipt: {},\n    /* temp function: change receipt */\n    receiptChange(url) {\n      this.loading = true;\n      this.receipt = {\n        Betslips: []\n      };\n      fetch(url).then(res => res.json()).then(data => {\n        this.receipt = data;\n        this.loading = false;\n      });\n    }\n\n    /*dateFormat(date, type) {\r\n      / * DD mmm YYYY HH:MM:SS * /\r\n      let dateObj = new Date(date);\r\n      if (typeof type !== 'undefined') {\r\n        if (type === 'short')\r\n          return (\r\n            dateObj.toLocaleDateString(currentCulture, { month: 'short', day: 'numeric' }) +\r\n            ' ' +\r\n            dateObj.toLocaleTimeString(currentCulture, { hour: '2-digit', minute: '2-digit', hour12: false })\r\n          );\r\n      } else\r\n        return (\r\n          dateObj.toLocaleDateString(currentCulture, { month: 'short', day: 'numeric' }) +\r\n          ' ' +\r\n          dateObj.toLocaleTimeString(currentCulture, { hour12: false })\r\n        );\r\n    },*/\n\n    //headerOpenBetsCounter: 0,\n    /*openbets: {\r\n      type: 1,\r\n      model: _defaultOpenBetsModel,\r\n      currency: '',\r\n      confirmCashOut: [],\r\n      betLoading: [],\r\n      cashoutLoading: [],\r\n      cashoutAnswer: [],\r\n      partialCashoutAmount: [],\r\n      cashout(id) {\r\n        if (!this.confirmCashOut[id]) {\r\n          this.confirmCashOut[id] = true;\r\n          setTimeout(() => {\r\n            this.confirmCashOut[id] = false;\r\n          }, 6000);\r\n        } else {\r\n          console.log('Cash ' + id + ' Out... ');\r\n          this.confirmCashOut[id] = false;\r\n          this.cashoutAnswer[id] = 'Bet Cashed Out at â‚¬' + common.parse(parse.toNum(this.partialCashoutAmount[id])).output;\r\n          setTimeout(\r\n            function () {\r\n              this.model.Bets = this.model.Bets.filter(x => x.Id !== id);\r\n            }.bind(this),\r\n            6000\r\n          );\r\n          this.cashoutLoading[id] = true;\r\n        }\r\n      },\r\n      async getDetails(id) {\r\n        let url = '/Models/openbets-details' + id + '.json';\r\n        console.log('fetching ' + id + '...');\r\n        this.betLoading[id] = true;\r\n        return await fetch(url)\r\n          .then(result => {\r\n            if (!result.ok) {\r\n              this.$store.betslip.error(result.statusText);\r\n            } else {\r\n              return result.json();\r\n            }\r\n          })\r\n          .then(data => {\r\n            if (typeof data !== 'undefined') {\r\n              var details = data;\r\n              return details;\r\n            }\r\n          })\r\n          .catch(function () {\r\n            console.error('Error');\r\n          })\r\n          .finally(() => {\r\n            this.betLoading[id] = false;\r\n          });\r\n      },\r\n      scoreMeta(str, gameId) {\r\n        let obj = { setscore: '', score: '', gamescore: '', matchminute: '', remainingtimeinperiod: '' },\r\n          valid = true,\r\n          basketballQ = { 15: 'Q1', 16: 'Q2', 17: 'Q3', 18: 'Q4', 31: 'OT' },\r\n          icehockeyP = { 3: 'P1', 4: 'P2', 5: 'P3', 6: 'P4', 7: 'P5' };\r\n        try {\r\n          obj = JSON.parse(str);\r\n        } catch (err) {\r\n          valid = false;\r\n        }\r\n        if (valid) {\r\n          obj.setscore = obj.setscore.replace(' - ', '-');\r\n          obj.timeremaining =\r\n            obj.remainingtimeinperiod === '' && obj.matchminute !== ''\r\n              ? obj.matchminute + '&rsquo;'\r\n              : obj.remainingtimeinperiod;\r\n          obj.quarter = '';\r\n          if ('eventstatusid' in obj) {\r\n            if (gameId === 2) obj.quarter = basketballQ[obj.eventstatusid];\r\n            else if (gameId === 106) obj.quarter = icehockeyP[obj.eventstatusid];\r\n          }\r\n        }\r\n        return obj;\r\n      }\r\n    }*/\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  documentReady,\n  betslipHandler\n});\n\n//# sourceURL=webpack://web.bet/./src/js/components/slip.UI.js?");

/***/ }),

/***/ "./src/css/app.css":
/*!*************************!*\
  !*** ./src/css/app.css ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://web.bet/./src/css/app.css?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["vendors"], function() { return __webpack_exec__("./src/js/app.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);